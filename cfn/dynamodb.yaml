AWSTemplateFormatVersion: '2010-09-09'
Description: 'CRC Website Database, API and Lambda Function.'

Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "ID"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema: 
        - AttributeName: "ID"
          KeyType: "HASH"
      TableName: "site-views"
      Tags: 
        - Key: "CRC-Stuff"
          Value: "true"

  DynamoDBItem:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Ref "DynamoDBTable"
      Item:
        ID: { "S": "1" }
        views: { "N": "1" }
  
  LambdaFunction: 
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: views-lambda-api
      Runtime: python3.8
      Role: arn:aws:iam::198101904822:role/BroadLambda
      Handler: index.handler
      Code:
        ZipFile: |
          import json
          import boto3
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('site-views')
          def lambda_handler(event, context):
              response = table.get_item(Key={
                  'ID':'0'
              })
              views = response['Item']['views']
              views = views + 1
              print(views)
              response = table.put_item(Item={
                      'ID':'0',
                      'views': views
              })
              return views
      Description: Invoke a function during stack creation.
      TracingConfig:
        Mode: Active
      Tags: 
        - Key: "CRC-Stuff"
          Value: "true"

  APIEndpoint:
   Type: AWS::Lambda::Url
   Properties: 
     AuthType: NONE
      #Cors: 
        #AllowOrigins: 
          #- (*)
          #- https://warnerbell.com
     TargetFunctionArn: !GetAtt LambdaFunction.Arn 
      

Outputs:
  LambdaFunctionURL:
    Value:
      Fn::GetAtt:
      - LambdaFunction
      - Arn
    Description: The HTTP URL endpoint for your function. and The Amazon Resource Name (ARN) of the function.
